{
  "name": "Oracle to s3 data uploader",
  "tagline": "Data streamer from Oracle to Amazon-S3",
  "body": "# Oracle-to-S3 data uploader.\r\n    Ground to cloud data integration tool.\r\n    Let's you stream your Oracle table/query data to Amazon-S3 from Windows CLI (command line).\r\n\r\n\r\nFeatures:\r\n - Streams Oracle table data to Amazon-S3.\r\n - No need to create CSV extracts before upload to S3.\r\n - Data stream is compressed while upload to S3.\r\n - No need for Amazon AWS CLI.\r\n - Works from your OS Windows desktop (command line).\r\n - It's executable (Oracle_To_S3_Uploader.exe)  - no need for Python install.\r\n - It's 64 bit - it will work on any vanilla DOS for 64-bit Windows.\r\n - AWS Access Keys are not passed as arguments. \r\n - Written using Python/boto/PyInstaller.\r\n\r\n\r\n##Version\r\n\r\nOS|Platform|Version \r\n---|---|---- | -------------\r\nWindows|64bit|[1.2 beta]\r\n\r\n##Purpose\r\n\r\n- Stream (upload) Oracle table data to Amazon-S3.\r\n\r\n## How it works\r\n- Tool connects to source Oracle DB and opens data pipe for reading.\r\n- Data is pumped to S3 using multipart upload.\r\n- Optional upload to Reduced Redundancy storage (not RR by default).\r\n- Optional \"make it public\" after upload (private by default)\r\n- If doesn't, bucket is created\r\n- You can control the region where new bucket is created\r\n- Streamed data can be tee'd (dumped on disk) during upload.\r\n- If not set, S3 Key defaulted to query file name.\r\n- It's a Python/boto script\r\n\t* Boto S3 docs: http://boto.cloudhackers.com/en/latest/ref/s3.html\r\n- Executable is created using [pyInstaller] (http://www.pyinstaller.org/)\r\n\r\n##Audience\r\n\r\nDatabase/ETL developers, Data Integrators, Data Engineers, Business Analysts, AWS Developers, DevOps, \r\n\r\n##Designated Environment\r\nPre-Prod (UAT/QA/DEV)\r\n\r\n##Usage\r\n\r\n```\r\nc:\\Python35-32\\PROJECTS\\Ora2S3>dist\\oracle_to_s3_uploader.exe\r\n#############################################################################\r\n#Oracle to S3 Data Uploader (v1.2, beta, 04/05/2016 15:11:53) [64bit]\r\n#Copyright (c): 2016 Alex Buzunov, All rights reserved.\r\n#Agreement: Use this tool at your own risk. Author is not liable for any damages\r\n#           or losses related to the use of this software.\r\n################################################################################\r\nUsage:\r\n  set AWS_ACCESS_KEY_ID=<you access key>\r\n  set AWS_SECRET_ACCESS_KEY=<you secret key>\r\n  set ORACLE_LOGIN=tiger/scott@orcl\r\n  set ORACLE_CLIENT_HOME=C:\\app\\oracle12\\product\\12.1.0\\dbhome_1\r\n\r\n  oracle_to_s3_uploader.exe [<ora_query_file>] [<ora_col_delim>] [<ora_add_header>]\r\n                            [<s3_bucket_name>] [<s3_key_name>] [<s3_use_rr>] [<s3_public>]\r\n\r\n        --ora_query_file -- SQL query to execure in source Oracle db.\r\n        --ora_col_delim  -- CSV column delimiter (|).\r\n        --ora_add_header -- Add header line to CSV file (False).\r\n        --ora_lame_duck  -- Limit rows for trial upload (1000).\r\n        --create_data_dump -- Use it if you want to persist streamed data on your filesystem.\r\n\r\n        --s3_bucket_name -- S3 bucket name (always set it).\r\n        --s3_location    -- New bucket location name (us-west-2)\r\n                                Set it if you are creating new bucket\r\n        --s3_key_name    -- CSV file name (to store query results on S3).\r\n                if <s3_key_name> is not specified, the oracle query filename (ora_query_file) will be used.\r\n        --s3_use_rr -- Use reduced redundancy storage (False).\r\n        --s3_write_chunk_size -- Chunk size for multipart upoad to S3 (10<<21, ~20MB).\r\n        --s3_public -- Make uploaded file public (False).\r\n\r\n        Oracle data uploaded to S3 is always compressed (gzip).\r\n\r\n```\r\n#Example\r\n\r\n\r\n###Environment variables\r\n\r\n* Set the following environment variables (for all tests):\r\nset_env.bat:\r\n```\r\nset AWS_ACCESS_KEY_ID=<you access key>\r\nset AWS_SECRET_ACCESS_KEY=<you secret key>\r\n\r\nset ORACLE_LOGIN=tiger/scott@orcl\r\nset ORACLE_CLIENT_HOME=C:\\\\app\\\\oracle12\\\\product\\\\12.1.0\\\\dbhome_1\r\n```\r\n\r\n### Test upload with data dump.\r\nIn this example complete table `test2` get's uploaded to Aamzon-S3 as compressed CSV file.\r\n\r\nContents of the file *table_query.sql*:\r\n\r\n```\r\nSELECT * FROM test2;\r\n\r\n```\r\nAlso temporary dump file is created for analysis (by default there are no files created)\r\nUse `-s, --create_data_dump` to dump streamed data.\r\n\r\nIf target bucket does not exists it will be created in user controlled region.\r\nUse argument `-t, --s3_location` to set target region name\r\n\r\nContents of the file *test.bat*:\r\n```\r\ndist\\oracle_to_s3_uploader.exe ^\r\n\t-q table_query.sql ^\r\n\t-d \"|\" ^\r\n\t-e ^\r\n\t-b test_bucket ^\r\n\t-k oracle_table_export ^\r\n\t-r ^\r\n\t-p ^\r\n\t-s\r\n```\r\nExecuting `test.bat`:\r\n\r\n```\r\nc:\\Python35-32\\PROJECTS\\Ora2S3>dist\\oracle_to_s3_uploader.exe   -q table_query.sql      -d \"|\"  -e      -b test_bucket       -k oracle_table_export  -r      -p      -s\r\nUploading results of \"table_query.sql\" to existing bucket \"test_bucket\"\r\nDumping data to: c:\\Python35-32\\PROJECTS\\Ora2S3\\data_dump\\table_query\\test_bucket\\oracle_table_export.20160405_235310.gz\r\n1 chunk 10.0 GB [8.95 sec]\r\n2 chunk 5.94 GB [5.37 sec]\r\nUncompressed data size: 15.94 GB\r\nCompressed data size: 63.39 MB\r\nUpload complete (17.58 sec).\r\nYour PUBLIC upload is at: https://s3-us-west-2.amazonaws.com/test_bucket/oracle_table_export.gz\r\n```\r\n\r\n\r\n\r\n###Download\r\n* `git clone https://github.com/alexbuz/Oracle_To_S3_Data_Uploader`\r\n* [Master Release](https://github.com/alexbuz/Oracle_To_S3_Data_Uploader/archive/master.zip) -- `oracle_to_s3_uploader 1.2`\r\n\r\n\r\n\r\n\r\n#\r\n#\r\n#\r\n#\r\n#   \r\n#FAQ\r\n#  \r\n#### Can it load Oracle data to Amazon S3 file?\r\nYes, it is the main purpose of this tool.\r\n\r\n#### Can developers integrate `Oracle_To_S3_Data_Uploader` into their ETL pipelines?\r\nYes. Assuming they are doing it on OS Windows.\r\n\r\n#### How fast is data upload using `CSV Loader for Redshift`?\r\nAs fast as any implementation of multi-part load using Python and boto.\r\n\r\n####How to inscease upload speed?\r\nInput data stream is getting compressed before upload to S3. So not much could be done here.\r\nYou may want to run it closer to source or target for better performance.\r\n\r\n#### What are the other ways to move large amounts of data from Oracle to S3?\r\nYou can write a sqoop script that can be scheduled as an 'EMR Activity' under Data Pipeline.\r\n\r\n#### Does it create temporary data file to facilitate data load to S3?\r\nNo\r\n\r\n#### Can I extract data from RDS Oracle to Amazon Redshift using this tool?\r\nYes, but whatch where you invoke it. If you execute it outside of AWS you may get data charges.\r\nYou should spawn OS Windows EC2 instance in the same Availability Zone with your DRS Oracle is residing.\r\nLogin to new EC2 instance usig Remote Desktop, download `Oracle_To_S3_Data_Uploader` and run it in CLI window.\r\n\r\n#### Can I log transfered data for analysis?\r\nYes, Use `-s, --create_data_dump` to dump streamed data.\r\n\r\n#### Explain first step of data transfer?\r\nThe query file you provided is used to select data form target Oracle server.\r\nStream is compressed before load to S3.\r\n\r\n#### Explain second step of data transfer?\r\nCompressed data is getting uploaded to S3 using multipart upload protocol.\r\n\r\n#### What technology was used to create this tool\r\nI used SQL*Plus, Python, Boto to write it.\r\nBoto is used to upload file to S3. \r\nSQL*Plus is used to spool data to compressor pipe.\r\n\r\n#### Where are the sources?\r\nPlease, contact me for sources.\r\n\r\n#### Can you modify functionality and add features?\r\nYes, please, ask me for new features.\r\n\r\n#### What other AWS tools you've created?\r\n- [CSV_Loader_For_Redshift] (https://github.com/alexbuz/CSV_Loader_For_Redshift/blob/master/README.md) - Append CSV data to Amazon-Redshift from Windows.\r\n- [S3_Sanity_Check] (https://github.com/alexbuz/S3_Sanity_Check/blob/master/README.md) - let's you `ping` Amazon-S3 bucket to see if it's publicly readable.\r\n- [EC2_Metrics_Plotter](https://github.com/alexbuz/EC2_Metrics_Plotter/blob/master/README.md) - plots any CloudWatch EC2 instance  metric stats.\r\n- [S3_File_Uploader](https://github.com/alexbuz/S3_File_Uploader/blob/master/README.md) - uploads file from Windows to S3.\r\n\r\n#### Do you have any AWS Certifications?\r\nYes, [AWS Certified Developer (Associate)](https://raw.githubusercontent.com/alexbuz/FAQs/master/images/AWS_Ceritied_Developer_Associate.png)\r\n\r\n#### Can you create similar/custom data tool for our business?\r\nYes, you can PM me here or email at `alex_buz@yahoo.com`.\r\nI'll get back to you within hours.\r\n\r\n###Links\r\n - [Employment FAQ](https://github.com/alexbuz/FAQs/blob/master/README.md)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}